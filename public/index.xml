<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chuliang Xiao on Chuliang Xiao</title>
    <link>/</link>
    <description>Recent content in Chuliang Xiao on Chuliang Xiao</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018 Chuliang Xiao</copyright>
    <lastBuildDate>Sun, 15 Oct 2017 00:00:00 -0400</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Comparison: sort, order and arrange</title>
      <link>/post/comparison-sort-order-and-arrange/</link>
      <pubDate>Wed, 28 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/comparison-sort-order-and-arrange/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;h2 id=&#34;vector-or-factor&#34;&gt;&lt;strong&gt;vector&lt;/strong&gt; (or factor)&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(x &amp;lt;- swiss$Education[1:20])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] 12  9  5  7 15  7  7  8  7 13  6 12  7 12  5  2  8 28 20  9&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# sort the vector
sort(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  2  5  5  6  7  7  7  7  7  8  8  9  9 12 12 12 13 15 20 28&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# partial sorting
sort(x, partial = c(10, 15))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  2  5  5  7  7  7  7  6  7  8  8  9  9 12 12 12 13 28 20 15&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Partial sorting in R is different with that in &lt;a href=&#34;http://en.wikipedia.org/wiki/Partial_sorting&#34;&gt;Wikipedia&lt;/a&gt;. See &lt;a href=&#34;https://stackoverflow.com/a/23579512&#34;&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h2 id=&#34;data.frame&#34;&gt;&lt;strong&gt;data.frame&lt;/strong&gt;&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;order&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(mtcars)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                    mpg cyl disp  hp drat    wt  qsec vs am gear carb
## Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
## Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
## Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
## Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
## Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
## Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# sort by mpg
Rank1 &amp;lt;- mtcars[order(mtcars$mpg), ]
head(Rank1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                      mpg cyl disp  hp drat    wt  qsec vs am gear carb
## Cadillac Fleetwood  10.4   8  472 205 2.93 5.250 17.98  0  0    3    4
## Lincoln Continental 10.4   8  460 215 3.00 5.424 17.82  0  0    3    4
## Camaro Z28          13.3   8  350 245 3.73 3.840 15.41  0  0    3    4
## Duster 360          14.3   8  360 245 3.21 3.570 15.84  0  0    3    4
## Chrysler Imperial   14.7   8  440 230 3.23 5.345 17.42  0  0    3    4
## Maserati Bora       15.0   8  301 335 3.54 3.570 14.60  0  1    5    8&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# sort by cyl, then by hp
Rank2 &amp;lt;- mtcars[order(mtcars$cyl, mtcars$hp), ]
head(Rank2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                 mpg cyl  disp hp drat    wt  qsec vs am gear carb
## Honda Civic    30.4   4  75.7 52 4.93 1.615 18.52  1  1    4    2
## Merc 240D      24.4   4 146.7 62 3.69 3.190 20.00  1  0    4    2
## Toyota Corolla 33.9   4  71.1 65 4.22 1.835 19.90  1  1    4    1
## Fiat 128       32.4   4  78.7 66 4.08 2.200 19.47  1  1    4    1
## Fiat X1-9      27.3   4  79.0 66 4.08 1.935 18.90  1  1    4    1
## Porsche 914-2  26.0   4 120.3 91 4.43 2.140 16.70  0  1    5    2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# reverse sort
Rank3 &amp;lt;- mtcars[order(-mtcars$cyl, mtcars$hp), ]
head(Rank3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                    mpg cyl  disp  hp drat    wt  qsec vs am gear carb
## Dodge Challenger  15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
## AMC Javelin       15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
## Hornet Sportabout 18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
## Pontiac Firebird  19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
## Merc 450SE        16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
## Merc 450SL        17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If data.frame mtcars is &lt;code&gt;attach()&lt;/code&gt;, then&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;attach(mtcars)
mpgRank &amp;lt;- mtcars[order(mpg), ]
head(mpgRank)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                      mpg cyl disp  hp drat    wt  qsec vs am gear carb
## Cadillac Fleetwood  10.4   8  472 205 2.93 5.250 17.98  0  0    3    4
## Lincoln Continental 10.4   8  460 215 3.00 5.424 17.82  0  0    3    4
## Camaro Z28          13.3   8  350 245 3.73 3.840 15.41  0  0    3    4
## Duster 360          14.3   8  360 245 3.21 3.570 15.84  0  0    3    4
## Chrysler Imperial   14.7   8  440 230 3.23 5.345 17.42  0  0    3    4
## Maserati Bora       15.0   8  301 335 3.54 3.570 14.60  0  1    5    8&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;dplyr::arrange&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Rank4 &amp;lt;- arrange(mtcars, mpg)
head(Rank4)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    mpg cyl disp  hp drat    wt  qsec vs am gear carb
## 1 10.4   8  472 205 2.93 5.250 17.98  0  0    3    4
## 2 10.4   8  460 215 3.00 5.424 17.82  0  0    3    4
## 3 13.3   8  350 245 3.73 3.840 15.41  0  0    3    4
## 4 14.3   8  360 245 3.21 3.570 15.84  0  0    3    4
## 5 14.7   8  440 230 3.23 5.345 17.42  0  0    3    4
## 6 15.0   8  301 335 3.54 3.570 14.60  0  1    5    8&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Rank5 &amp;lt;- arrange(mtcars, cyl, hp)
head(Rank5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    mpg cyl  disp hp drat    wt  qsec vs am gear carb
## 1 30.4   4  75.7 52 4.93 1.615 18.52  1  1    4    2
## 2 24.4   4 146.7 62 3.69 3.190 20.00  1  0    4    2
## 3 33.9   4  71.1 65 4.22 1.835 19.90  1  1    4    1
## 4 32.4   4  78.7 66 4.08 2.200 19.47  1  1    4    1
## 5 27.3   4  79.0 66 4.08 1.935 18.90  1  1    4    1
## 6 26.0   4 120.3 91 4.43 2.140 16.70  0  1    5    2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Rank6 &amp;lt;- arrange(mtcars, -cyl, hp)
head(Rank6)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    mpg cyl  disp  hp drat    wt  qsec vs am gear carb
## 1 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
## 2 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
## 3 18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
## 4 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
## 5 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
## 6 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;difference between order and arrange
&lt;ul&gt;
&lt;li&gt;row names: &lt;code&gt;order&lt;/code&gt; keep the row names of mtcars, while not in &lt;code&gt;dplyr::arrange&lt;/code&gt;&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;efficency: &lt;code&gt;dplyr::arrange&lt;/code&gt; tends to be faster when there are lots of rows.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Refer to&lt;br /&gt;
1. &lt;a href=&#34;http://www.cookbook-r.com/Manipulating_data/Sorting/&#34;&gt;Cookbook for R&lt;/a&gt;&lt;br /&gt;
2. &lt;a href=&#34;https://www.statmethods.net/management/sorting.html&#34;&gt;Quick-R&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Comparison: transform, within and mutate</title>
      <link>/post/comparison-transform-within-and-mutate/</link>
      <pubDate>Sun, 25 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/comparison-transform-within-and-mutate/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/22417662/what-is-the-difference-between-transform-and-within&#34; class=&#34;uri&#34;&gt;https://stackoverflow.com/questions/22417662/what-is-the-difference-between-transform-and-within&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Comparison: subset and filter</title>
      <link>/post/comparison-subset-and-filter/</link>
      <pubDate>Fri, 23 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/comparison-subset-and-filter/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/a/39882777&#34;&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>From NCL to R</title>
      <link>/post/from-ncl-to-r/</link>
      <pubDate>Fri, 16 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/from-ncl-to-r/</guid>
      <description>&lt;p&gt;From the point of atmospheric science, NCL has certain natural advantages in dealing with self-described meteorological data formats, but R is improving significantly.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Unformated Binary&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;I have to say both NCL and R are not as good at reading/writing binary files as Fotran, though technically they are able to do the job.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Self-decribed Binary&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;NCL uses a single function &lt;code&gt;addfile&lt;/code&gt; to handle all format (netCDF, HDF, GRIB, CCM, shapefile), while R requires additional packages.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;NCL and R variables not only support &lt;em&gt;attributes&lt;/em&gt;, &lt;em&gt;dimension names&lt;/em&gt;.
&lt;ul&gt;
&lt;li&gt;NCL defaultly supports &lt;em&gt;coordinates&lt;/em&gt; to its variables, while R does this in the &lt;code&gt;Spatial*&lt;/code&gt; classes and is more powerful in GIS.&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;For Lambert Conformal Conic (LCC), NCL variables can have 2-dimensional coordinate attributes (lat2d and lon2d), which then can be automatically plotted to a basemap in any projection, which to me is huge advantage.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;N-Dimensional Array&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;The concept of &lt;code&gt;Array&lt;/code&gt; is pretty week in R, such as &lt;em&gt;Vector&lt;/em&gt; and &lt;em&gt;Matrix&lt;/em&gt;, while multi-dimensional arrays, such like a temperature variable T(ensemble, time, lev, lat, lon), are so popular in NCL.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tabular&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;No need to verbose, &lt;code&gt;data.frame&lt;/code&gt; is what makes R what it is.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>/post/hello-world/</link>
      <pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/hello-world/</guid>
      <description>&lt;p&gt;I used to blog a little bit on &lt;a href=&#34;http://gzhy.blogspot.com/&#34;&gt;Blogger&lt;/a&gt; when I was in China. I have stopped blogging for a long time since the emergency of social networks. Looking back at what I wrote when I was a young college student, I couldn’t help but feel how different I am right now. I really hope I can start likeing writting things again, focusing on &lt;strong&gt;R &amp;amp; Data Science&lt;/strong&gt; from a geoscience perspective.&lt;/p&gt;
&lt;p&gt;Huge thanks for &lt;a href=&#34;https://yihui.name/en/about/&#34;&gt;Yihui Xie&lt;/a&gt; and his &lt;a href=&#34;https://github.com/rstudio/blogdown&#34;&gt;blogdown&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>West Michigan Big Data Meetup</title>
      <link>/talk/2018-meetup-big-data/</link>
      <pubDate>Thu, 01 Feb 2018 00:00:00 -0500</pubDate>
      
      <guid>/talk/2018-meetup-big-data/</guid>
      <description>&lt;p&gt;At 6 PM, Dr. Xiao will present on Big Data and Climate Modeling. Dr. Xiao works at the National Oceanic and Atmospheric Administration (NOAA) Great Lakes Environmental Research Laboratory (GLERL) in Ann Arbor. He specializes in hydro-climatology and climate change in the Great Lakes region using regional numerical climate models. As a climate modeler, Dr. Xiao deals with &amp;ldquo;Big Meteorological Data&amp;rdquo; from in-situ observation stations, buoys, radars, satellites, and mostly numerical models. He uses a sophisticated regional climate model (written in Fortran) to conduct century-scale simulations and projections (terabyte scale) of the hydroclimatology in Great Lakes region in terms of precipitation, temperature, ice coverage, river discharge, lake level, etc, with post-processing done by using analysis and visualization programming tools (e.g. NCL, R and Python). Dr. Xiao&amp;rsquo;s presentation should be an interesting source of ideas for data scientists and data analysts in other fields because climate modelers have developed and employ special methods of working with big data.&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title> Evaluating and improving modeled turbulent heat fluxes across the North American Great Lakes</title>
      <link>/publication/2018-eddy/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/publication/2018-eddy/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Implementing the WRF-Hydro Modeling System in the Great Lakes Region</title>
      <link>/talk/2018-ams-austin/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 -0500</pubDate>
      
      <guid>/talk/2018-ams-austin/</guid>
      <description>&lt;p&gt;As a physics-based, spatially-distributed hydrologic modeling system, the community Weather Research and Forecasting model (WRF) hydrological extension package (WRF-Hydro) has been used in several streamflow prediction applications in the U.S. and around the world, including the National Water Model (NWM) at the newly established NOAA National Water Center. However, because of lack of consistency of the geofabric data along the U.S. and Canada borders, the Great Lakes basin is not entirely included in NWM, leaving a substantial gap for applying the national model to the water-dominated region. Thus, a specific effort has been devoted to implementing the WRF-Hydro modeling system in the Great Lakes basin, including preparing high-resolution terrain datasets, parameterizing lakes and reservoirs, and calibrating the model. Two experiments have been carried out to support implementation of the NWM in the Great Lakes basin: an offline WRF-Hydro simulation forced by NLDAS2 and a coupled WRF/WRF-Hydro simulation. The model results are validated against observations in terms of precipitation, runoff, soil moisture, channel flow, and land surface heat fluxes. Our preliminary study presented here shows that the WRF-Hydro model is capable of reproducing the land–hydro-air feedbacks in the Great Lakes region.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Turbulent heat fluxes during an extreme lake effect snow event</title>
      <link>/publication/2017-flux/</link>
      <pubDate>Fri, 01 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/publication/2017-flux/</guid>
      <description></description>
    </item>
    
    <item>
      <title> Improving the lake scheme within a coupled WRF-Lake model in the Laurentian Great Lakes</title>
      <link>/publication/2016-lake/</link>
      <pubDate>Thu, 22 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>/publication/2016-lake/</guid>
      <description></description>
    </item>
    
    <item>
      <title>WRF-Hydro</title>
      <link>/project/wrf-hydro/</link>
      <pubDate>Sat, 01 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>/project/wrf-hydro/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;The implementation of the community Weather Research and Forecasting model hydrological extension package (WRF-Hydro) (&lt;a href=&#34;https://ral.ucar.edu/projects/wrf_hydro/overview&#34; target=&#34;_blank&#34;&gt;Gochis et al. 2013&lt;/a&gt;) in the Great Lakes region with collaborators from the National Center for Atmospheric Research (NCAR) supported by a newly granted NOAA Joint Technology Transfer Initiative (JTTI) project.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Beginning in the summer of 2016, the NOAA &lt;a href=&#34;http://water.noaa.gov&#34; target=&#34;_blank&#34;&gt;National Water Center (NWC)&lt;/a&gt; in partnership with the National Centers for Environmental Prediction (NCEP), the National Center for Atmospheric Research (NCAR) and other academic partners will produce operational hydrologic predictions for the nation using a new National Water Model (NWM) that is based on WRF-Hydro. The WRF-Hydro modeling system is a physics-based, distributed hydrologic modeling system and has been used in several streamflow prediction applications in the U.S. and around the world.  The modeling system provides users with a multi-physics and multi-scale modeling framework for representing a large range of terrestrial hydrologic processes such as infiltration, runoff, lateral flow, channel flow, soil moisture, snowpack, and evapotranspiration as well as various water management components.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Because of lack of consistency of high-resolution terrain (also known as “geofabric”) data along the U.S. and Canada borders, the Great Lakes basin is not entirely included in the current version of NWM, leaving a substantial gap for applying the national model to the water-dominated region with the largest lake system on earth. Thus, a specific effort has been devoted to implementing the WRF-Hydro modeling system in the Great Lakes basin, including preparing high-resolution terrain datasets, parameterizing lakes and reservoirs, and calibrating the model.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Observed variability of summer precipitation pattern and extreme events in China associated with variations of the East Asian summer monsoon</title>
      <link>/publication/2016-precipiation/</link>
      <pubDate>Thu, 30 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>/publication/2016-precipiation/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The concurrent variability of East Asian subtropical and polar-front jets and its implication for the winter climate anomaly in China</title>
      <link>/publication/2016-jet/</link>
      <pubDate>Wed, 22 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>/publication/2016-jet/</guid>
      <description></description>
    </item>
    
    <item>
      <title>WRF-Lake</title>
      <link>/project/wrf-lake/</link>
      <pubDate>Thu, 01 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>/project/wrf-lake/</guid>
      <description>&lt;p&gt;The lake module in WRF (original called LISSS, Subin et al. 2012) was obtained from the Community Land Model version 4.5 with some modifications by Gu et al. (2015), based on the origional concept of Hostetler and Bartlein (1990), which performs quite well in shallow lakes (depth &amp;lt; 50 m). (Incorporated in WRF since v3.6). Our work (Xiao et al. 2016) further updated the lake module in WRF with the surface albedo scheme and vertical diffusivity to improve the lake surface temperature and lake ice simulation in the Great Lakes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Projected changes of wintertime synoptic-scale transient eddy activities in the East Asian eddy-driven jet from CMIP5 experiments</title>
      <link>/publication/2015-cmip5/</link>
      <pubDate>Tue, 28 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>/publication/2015-cmip5/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
